import java.time.format.DateTimeFormatter

allprojects(){
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}

apply plugin: "java"
apply plugin: "kotlin"

version '1.0'
compileJava.options.fork = true

targetCompatibility = 8
//switch to JavaVersion.VERSION_17 to use Java 17 features; this requires adding jabel (see dependencies block below)
sourceCompatibility = JavaVersion.VERSION_16

tasks.withType(JavaCompile){
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_16
    options.encoding = "UTF-8"
//        options.encoding = "windows-1251"
    options.compilerArgs += ["-Xlint:deprecation"]

    options.forkOptions.jvmArgs.addAll([
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--illegal-access=permit'
    ])
}
sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
}
ext{
    mindustryVersion = 'v140.4'
    jabelVersion = "0.7.0"
    modCoreVersion = "2bbb58e351f"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}
dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    /*compileOnly "com.github.Anuken.MindustryJitpack:core:69f0126eca"
    compileOnly "com.github.Anuken.Arc:arc-core:b1b88883e2"*/

    implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
    implementation "com.github.Zelaux.ZelauxModCore:utils:$modCoreVersion"
    compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion","com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
}

task jarAndroid{
    dependsOn "jar"
    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");
        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}
        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")
        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")
        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}
jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }
    from(rootDir){
        include "mod.json"
        include "icon.png"
    }
    from("assets/"){
        include "**"
    }
}
task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"
    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }
    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
static def os(){ //Returns OS name
    String s = System.getProperty("os.name");
    return s == null ? "" : s;
}
static def getdatadir(){ //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if(ret == null){
        def os = os()
        if(os.contains("Windows")){
            return System.getenv("AppData") + "\\Mindustry\\"
        }else if(os.contains("Linux") || os.contains("BSD")){
            if(System.getenv("XDG_DATA_HOME") != null){
                String dir = System.getenv("XDG_DATA_HOME")
                if(!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        }else if(os.contains("Mac")){
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/";
        }
    }
    return ret
}
task mjar(){
    dependsOn "jar"
    doFirst{}
    ext{
        acopy = { String intoPath ->
            delete{
                delete "${intoPath}/${project.archivesBaseName}Desktop.jar"
            }
            copy{
                from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
                into intoPath
            }
            println "Moved to ${intoPath}"
        }
    }
    doLast{
        def modsDirectories = [];
        def file = new File(rootDir, "modsDirectories.txt");
        if(file.exists()){
            BufferedReader reader = new BufferedReader(new FileReader(file));
            reader.lines().forEach(line -> modsDirectories.add(line))
            reader.close();
        }else{
            modsDirectories.add("classic");
        }
        for(String directory : modsDirectories){
            if(directory.startsWith("#") || directory.startsWith("//")){
                println "Directory \"$directory\" was skipped."
                continue
            }
            if(directory.equals("classic")){
                directory = getdatadir() + "mods";
            }
            acopy(directory);
        }
        def time = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"));
        println "Build ended at: ${time}"
    }
}
buildscript {
    ext.kotlin_version = '1.7.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task mrun{
    dependsOn mjar
    doLast{
        def gamePath = temporaryDir.absolutePath + "\\Mindustry$mindustryVersion" + ".jar"
        def gameUrl = mindustryVersion.startsWith("v") ?
                "https://github.com/Anuken/Mindustry/releases/download/$mindustryVersion/Mindustry.jar" :
                "https://github.com/Anuken/MindustryBuilds/releases/download/$mindustryVersion/Mindustry-BE-Desktop-$mindustryVersion.jar"
        def gameFile = new File(gamePath)
        if (!gameFile.exists()) {
            println "Downloading Mindustry $mindustryVersion from ${gameUrl} to ${gamePath}"
            new URL(gameUrl).withInputStream{ i -> gameFile.withOutputStream{ it << i } }
            println "Done"
        }
        javaexec{ classpath = files(gamePath) }
    }
}